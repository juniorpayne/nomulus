// Copyright 2024 The Nomulus Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package google.registry.model.console;

import static google.registry.util.PreconditionsUtils.checkArgumentNotNull;

import google.registry.model.Buildable;
import google.registry.model.ImmutableObject;
import google.registry.model.annotations.IdAllocation;
import jakarta.persistence.Access;
import jakarta.persistence.AccessType;
import jakarta.persistence.Column;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.MappedSuperclass;
import org.joda.time.DateTime;

/**
 * A record of a resource that was updated through the console.
 *
 * <p>This abstract class has several subclasses that (mostly) include the modified resource itself
 * so that the entire object history is persisted to SQL.
 */
@Access(AccessType.FIELD)
@MappedSuperclass
public abstract class ConsoleUpdateHistory extends ImmutableObject implements Buildable {

  public enum Type {
    EPP_ACTION,
    POC_CREATE,
    POC_UPDATE,
    POC_DELETE,
    REGISTRAR_UPDATE,
    USER_CREATE,
    USER_DELETE,
    USER_UPDATE
  }

  /** Autogenerated ID of this event. */
  @Id
  @IdAllocation
  @Column(nullable = false, name = "historyRevisionId")
  protected Long revisionId;

  /** The user that performed the modification. */
  @JoinColumn(name = "historyActingUser", referencedColumnName = "emailAddress", nullable = false)
  @ManyToOne
  User actingUser;

  /** The URL of the action that was used to make the modification. */
  @Column(nullable = false, name = "historyUrl")
  String url;

  /** The HTTP method (e.g. POST, PUT) used to make this modification. */
  @Column(nullable = false, name = "historyMethod")
  String method;

  /** The raw body of the request that was used to make this modification. */
  @Column(name = "historyRequestBody")
  String requestBody;

  /** The time at which the modification was mode. */
  @Column(nullable = false, name = "historyModificationTime")
  DateTime modificationTime;

  /** The type of modification. */
  @Column(nullable = false, name = "historyType")
  @Enumerated(EnumType.STRING)
  Type type;

  public long getRevisionId() {
    return revisionId;
  }

  public User getActingUser() {
    return actingUser;
  }

  public String getUrl() {
    return url;
  }

  public String getMethod() {
    return method;
  }

  public String getRequestBody() {
    return requestBody;
  }

  public DateTime getModificationTime() {
    return modificationTime;
  }

  public Type getType() {
    return type;
  }

  @Override
  public abstract Builder<? extends ConsoleUpdateHistory, ?> asBuilder();

  /** Builder for the immutable ConsoleUpdateHistory. */
  public abstract static class Builder<
          T extends ConsoleUpdateHistory, B extends ConsoleUpdateHistory.Builder<?, ?>>
      extends GenericBuilder<T, B> {

    protected Builder() {}

    protected Builder(T instance) {
      super(instance);
    }

    @Override
    public T build() {
      checkArgumentNotNull(getInstance().actingUser, "Acting user must be specified");
      checkArgumentNotNull(getInstance().url, "URL must be specified");
      checkArgumentNotNull(getInstance().method, "HTTP method must be specified");
      checkArgumentNotNull(getInstance().modificationTime, "modificationTime must be specified");
      checkArgumentNotNull(getInstance().type, "Console History type must be specified");
      return super.build();
    }

    public B setActingUser(User actingUser) {
      getInstance().actingUser = actingUser;
      return thisCastToDerived();
    }

    public B setUrl(String url) {
      getInstance().url = url;
      return thisCastToDerived();
    }

    public B setMethod(String method) {
      getInstance().method = method;
      return thisCastToDerived();
    }

    public B setRequestBody(String requestBody) {
      getInstance().requestBody = requestBody;
      return thisCastToDerived();
    }

    public B setModificationTime(DateTime modificationTime) {
      getInstance().modificationTime = modificationTime;
      return thisCastToDerived();
    }

    public B setType(Type type) {
      getInstance().type = type;
      return thisCastToDerived();
    }
  }
}
