class google.registry.model.common.EntityGroupRoot {
  @Id java.lang.String id;
}
class google.registry.model.common.GaeUserIdConverter {
  @Id long id;
  com.google.appengine.api.users.User user;
}
class google.registry.model.contact.ContactAddress {
  java.lang.String city;
  java.lang.String countryCode;
  java.lang.String state;
  java.lang.String zip;
  java.util.List<java.lang.String> street;
}
class google.registry.model.contact.ContactAuthInfo {
  google.registry.model.eppcommon.AuthInfo$PasswordAuth pw;
}
class google.registry.model.contact.ContactBase {
  @Id java.lang.String repoId;
  google.registry.model.contact.ContactAuthInfo authInfo;
  google.registry.model.contact.ContactPhoneNumber fax;
  google.registry.model.contact.ContactPhoneNumber voice;
  google.registry.model.contact.Disclose disclose;
  google.registry.model.contact.PostalInfo internationalizedPostalInfo;
  google.registry.model.contact.PostalInfo localizedPostalInfo;
  google.registry.model.transfer.ContactTransferData transferData;
  java.lang.String contactId;
  java.lang.String creationClientId;
  java.lang.String currentSponsorClientId;
  java.lang.String email;
  java.lang.String lastEppUpdateClientId;
  java.lang.String searchName;
  java.util.Set<google.registry.model.eppcommon.StatusValue> status;
  org.joda.time.DateTime deletionTime;
  org.joda.time.DateTime lastEppUpdateTime;
  org.joda.time.DateTime lastTransferTime;
}
class google.registry.model.contact.ContactHistory {
  @Id java.lang.Long id;
  @Parent com.googlecode.objectify.Key<? extends google.registry.model.EppResource> parent;
  boolean bySuperuser;
  byte[] xmlBytes;
  google.registry.model.contact.ContactBase contactBase;
  google.registry.model.domain.Period period;
  google.registry.model.eppcommon.Trid trid;
  google.registry.model.reporting.HistoryEntry$Type type;
  java.lang.Boolean requestedByRegistrar;
  java.lang.String clientId;
  java.lang.String otherClientId;
  java.lang.String reason;
  java.util.Set<google.registry.model.reporting.DomainTransactionRecord> domainTransactionRecords;
  org.joda.time.DateTime modificationTime;
}
class google.registry.model.contact.ContactPhoneNumber {
  java.lang.String extension;
  java.lang.String phoneNumber;
}
class google.registry.model.contact.ContactResource {
  @Id java.lang.String repoId;
  google.registry.model.contact.ContactAuthInfo authInfo;
  google.registry.model.contact.ContactPhoneNumber fax;
  google.registry.model.contact.ContactPhoneNumber voice;
  google.registry.model.contact.Disclose disclose;
  google.registry.model.contact.PostalInfo internationalizedPostalInfo;
  google.registry.model.contact.PostalInfo localizedPostalInfo;
  google.registry.model.transfer.ContactTransferData transferData;
  java.lang.String contactId;
  java.lang.String creationClientId;
  java.lang.String currentSponsorClientId;
  java.lang.String email;
  java.lang.String lastEppUpdateClientId;
  java.lang.String searchName;
  java.util.Set<google.registry.model.eppcommon.StatusValue> status;
  org.joda.time.DateTime deletionTime;
  org.joda.time.DateTime lastEppUpdateTime;
  org.joda.time.DateTime lastTransferTime;
}
class google.registry.model.contact.Disclose {
  google.registry.model.eppcommon.PresenceMarker email;
  google.registry.model.eppcommon.PresenceMarker fax;
  google.registry.model.eppcommon.PresenceMarker voice;
  java.lang.Boolean flag;
  java.util.List<google.registry.model.contact.Disclose$PostalInfoChoice> addr;
  java.util.List<google.registry.model.contact.Disclose$PostalInfoChoice> name;
  java.util.List<google.registry.model.contact.Disclose$PostalInfoChoice> org;
}
class google.registry.model.contact.Disclose$PostalInfoChoice {
  google.registry.model.contact.PostalInfo$Type type;
}
class google.registry.model.contact.PostalInfo {
  google.registry.model.contact.ContactAddress address;
  google.registry.model.contact.PostalInfo$Type type;
  java.lang.String name;
  java.lang.String org;
}
enum google.registry.model.contact.PostalInfo$Type {
  INTERNATIONALIZED;
  LOCALIZED;
}
class google.registry.model.domain.Domain {
  @Id java.lang.String repoId;
  google.registry.model.domain.DomainAuthInfo authInfo;
  google.registry.model.domain.launch.LaunchNotice launchNotice;
  google.registry.model.transfer.DomainTransferData transferData;
  google.registry.persistence.VKey<google.registry.model.contact.ContactResource> adminContact;
  google.registry.persistence.VKey<google.registry.model.contact.ContactResource> billingContact;
  google.registry.persistence.VKey<google.registry.model.contact.ContactResource> registrantContact;
  google.registry.persistence.VKey<google.registry.model.contact.ContactResource> techContact;
  google.registry.persistence.VKey<google.registry.model.domain.token.AllocationToken> currentPackageToken;
  google.registry.persistence.VKey<google.registry.model.poll.PollMessage$Autorenew> autorenewPollMessage;
  google.registry.persistence.VKey<google.registry.model.poll.PollMessage$OneTime> deletePollMessage;
  java.lang.String creationClientId;
  java.lang.String currentSponsorClientId;
  java.lang.String fullyQualifiedDomainName;
  java.lang.String idnTableName;
  java.lang.String lastEppUpdateClientId;
  java.lang.String smdId;
  java.lang.String tld;
  java.util.Set<google.registry.model.domain.GracePeriod> gracePeriods;
  java.util.Set<google.registry.model.domain.secdns.DelegationSignerData> dsData;
  java.util.Set<google.registry.model.eppcommon.StatusValue> status;
  java.util.Set<google.registry.persistence.VKey<google.registry.model.host.Host>> nsHosts;
  java.util.Set<java.lang.String> subordinateHosts;
  org.joda.time.DateTime autorenewEndTime;
  org.joda.time.DateTime deletionTime;
  org.joda.time.DateTime lastEppUpdateTime;
  org.joda.time.DateTime lastTransferTime;
  org.joda.time.DateTime registrationExpirationTime;
}
class google.registry.model.domain.DomainAuthInfo {
  google.registry.model.eppcommon.AuthInfo$PasswordAuth pw;
}
class google.registry.model.domain.DomainBase {
  @Id java.lang.String repoId;
  google.registry.model.domain.DomainAuthInfo authInfo;
  google.registry.model.domain.launch.LaunchNotice launchNotice;
  google.registry.model.transfer.DomainTransferData transferData;
  google.registry.persistence.VKey<google.registry.model.contact.ContactResource> adminContact;
  google.registry.persistence.VKey<google.registry.model.contact.ContactResource> billingContact;
  google.registry.persistence.VKey<google.registry.model.contact.ContactResource> registrantContact;
  google.registry.persistence.VKey<google.registry.model.contact.ContactResource> techContact;
  google.registry.persistence.VKey<google.registry.model.domain.token.AllocationToken> currentPackageToken;
  google.registry.persistence.VKey<google.registry.model.poll.PollMessage$Autorenew> autorenewPollMessage;
  google.registry.persistence.VKey<google.registry.model.poll.PollMessage$OneTime> deletePollMessage;
  java.lang.String creationClientId;
  java.lang.String currentSponsorClientId;
  java.lang.String fullyQualifiedDomainName;
  java.lang.String idnTableName;
  java.lang.String lastEppUpdateClientId;
  java.lang.String smdId;
  java.lang.String tld;
  java.util.Set<google.registry.model.domain.GracePeriod> gracePeriods;
  java.util.Set<google.registry.model.domain.secdns.DelegationSignerData> dsData;
  java.util.Set<google.registry.model.eppcommon.StatusValue> status;
  java.util.Set<google.registry.persistence.VKey<google.registry.model.host.Host>> nsHosts;
  java.util.Set<java.lang.String> subordinateHosts;
  org.joda.time.DateTime autorenewEndTime;
  org.joda.time.DateTime deletionTime;
  org.joda.time.DateTime lastEppUpdateTime;
  org.joda.time.DateTime lastTransferTime;
  org.joda.time.DateTime registrationExpirationTime;
}
class google.registry.model.domain.DomainHistory {
  @Id java.lang.Long id;
  @Parent com.googlecode.objectify.Key<? extends google.registry.model.EppResource> parent;
  boolean bySuperuser;
  byte[] xmlBytes;
  google.registry.model.domain.DomainBase domainBase;
  google.registry.model.domain.Period period;
  google.registry.model.eppcommon.Trid trid;
  google.registry.model.reporting.HistoryEntry$Type type;
  java.lang.Boolean requestedByRegistrar;
  java.lang.String clientId;
  java.lang.String otherClientId;
  java.lang.String reason;
  java.util.Set<google.registry.model.domain.GracePeriod$GracePeriodHistory> gracePeriodHistories;
  java.util.Set<google.registry.model.domain.secdns.DomainDsDataHistory> dsDataHistories;
  java.util.Set<google.registry.model.reporting.DomainTransactionRecord> domainTransactionRecords;
  java.util.Set<google.registry.persistence.VKey<google.registry.model.host.Host>> nsHosts;
  org.joda.time.DateTime modificationTime;
}
class google.registry.model.domain.GracePeriod {
  google.registry.model.domain.rgp.GracePeriodStatus type;
  java.lang.String clientId;
  long gracePeriodId;
  org.joda.time.DateTime expirationTime;
}
class google.registry.model.domain.GracePeriod$GracePeriodHistory {
  google.registry.model.domain.rgp.GracePeriodStatus type;
  java.lang.Long domainHistoryRevisionId;
  java.lang.Long gracePeriodHistoryRevisionId;
  java.lang.String clientId;
  long gracePeriodId;
  org.joda.time.DateTime expirationTime;
}
class google.registry.model.domain.Period {
  google.registry.model.domain.Period$Unit unit;
  java.lang.Integer value;
}
enum google.registry.model.domain.Period$Unit {
  MONTHS;
  YEARS;
}
class google.registry.model.domain.launch.LaunchNotice {
  google.registry.model.domain.launch.LaunchNotice$NoticeIdType noticeId;
  org.joda.time.DateTime acceptedTime;
  org.joda.time.DateTime expirationTime;
}
class google.registry.model.domain.launch.LaunchNotice$NoticeIdType {
  java.lang.String tcnId;
  java.lang.String validatorId;
}
enum google.registry.model.domain.rgp.GracePeriodStatus {
  ADD;
  AUTO_RENEW;
  PENDING_DELETE;
  PENDING_RESTORE;
  REDEMPTION;
  RENEW;
  TRANSFER;
}
class google.registry.model.domain.secdns.DelegationSignerData {
  byte[] digest;
  int algorithm;
  int digestType;
  int keyTag;
}
class google.registry.model.domain.secdns.DomainDsDataHistory {
  byte[] digest;
  int algorithm;
  int digestType;
  int keyTag;
  java.lang.Long domainHistoryRevisionId;
  java.lang.Long dsDataHistoryRevisionId;
}
class google.registry.model.domain.token.AllocationToken {
  @Id java.lang.String token;
  boolean discountPremiums;
  double discountFraction;
  google.registry.model.common.TimedTransitionProperty<google.registry.model.domain.token.AllocationToken$TokenStatus> tokenStatusTransitions;
  google.registry.model.domain.token.AllocationToken$RegistrationBehavior registrationBehavior;
  google.registry.model.domain.token.AllocationToken$TokenType tokenType;
  google.registry.persistence.DomainHistoryVKey redemptionHistoryEntry;
  int discountYears;
  java.lang.String domainName;
  java.util.Set<java.lang.String> allowedClientIds;
  java.util.Set<java.lang.String> allowedTlds;
}
enum google.registry.model.domain.token.AllocationToken$RegistrationBehavior {
  ANCHOR_TENANT;
  BYPASS_TLD_STATE;
  DEFAULT;
}
enum google.registry.model.domain.token.AllocationToken$TokenStatus {
  CANCELLED;
  ENDED;
  NOT_STARTED;
  VALID;
}
enum google.registry.model.domain.token.AllocationToken$TokenType {
  PACKAGE;
  SINGLE_USE;
  UNLIMITED_USE;
}
class google.registry.model.eppcommon.AuthInfo$PasswordAuth {
  java.lang.String repoId;
  java.lang.String value;
}
class google.registry.model.eppcommon.PresenceMarker {
  boolean marked;
}
enum google.registry.model.eppcommon.StatusValue {
  CLIENT_DELETE_PROHIBITED;
  CLIENT_HOLD;
  CLIENT_RENEW_PROHIBITED;
  CLIENT_TRANSFER_PROHIBITED;
  CLIENT_UPDATE_PROHIBITED;
  INACTIVE;
  LINKED;
  OK;
  PENDING_CREATE;
  PENDING_DELETE;
  PENDING_TRANSFER;
  PENDING_UPDATE;
  SERVER_DELETE_PROHIBITED;
  SERVER_HOLD;
  SERVER_RENEW_PROHIBITED;
  SERVER_TRANSFER_PROHIBITED;
  SERVER_UPDATE_PROHIBITED;
}
class google.registry.model.eppcommon.Trid {
  java.lang.String clientTransactionId;
  java.lang.String serverTransactionId;
}
class google.registry.model.host.Host {
  @Id java.lang.String repoId;
  google.registry.persistence.VKey<google.registry.model.domain.Domain> superordinateDomain;
  java.lang.String creationClientId;
  java.lang.String currentSponsorClientId;
  java.lang.String fullyQualifiedHostName;
  java.lang.String lastEppUpdateClientId;
  java.util.Set<google.registry.model.eppcommon.StatusValue> status;
  java.util.Set<java.net.InetAddress> inetAddresses;
  org.joda.time.DateTime deletionTime;
  org.joda.time.DateTime lastEppUpdateTime;
  org.joda.time.DateTime lastSuperordinateChange;
  org.joda.time.DateTime lastTransferTime;
}
class google.registry.model.host.HostBase {
  @Id java.lang.String repoId;
  google.registry.persistence.VKey<google.registry.model.domain.Domain> superordinateDomain;
  java.lang.String creationClientId;
  java.lang.String currentSponsorClientId;
  java.lang.String fullyQualifiedHostName;
  java.lang.String lastEppUpdateClientId;
  java.util.Set<google.registry.model.eppcommon.StatusValue> status;
  java.util.Set<java.net.InetAddress> inetAddresses;
  org.joda.time.DateTime deletionTime;
  org.joda.time.DateTime lastEppUpdateTime;
  org.joda.time.DateTime lastSuperordinateChange;
  org.joda.time.DateTime lastTransferTime;
}
class google.registry.model.host.HostHistory {
  @Id java.lang.Long id;
  @Parent com.googlecode.objectify.Key<? extends google.registry.model.EppResource> parent;
  boolean bySuperuser;
  byte[] xmlBytes;
  google.registry.model.domain.Period period;
  google.registry.model.eppcommon.Trid trid;
  google.registry.model.host.HostBase hostBase;
  google.registry.model.reporting.HistoryEntry$Type type;
  java.lang.Boolean requestedByRegistrar;
  java.lang.String clientId;
  java.lang.String otherClientId;
  java.lang.String reason;
  java.util.Set<google.registry.model.reporting.DomainTransactionRecord> domainTransactionRecords;
  org.joda.time.DateTime modificationTime;
}
class google.registry.model.index.EppResourceIndex {
  @Id java.lang.String id;
  @Parent com.googlecode.objectify.Key<google.registry.model.index.EppResourceIndexBucket> bucket;
  com.googlecode.objectify.Key<? extends google.registry.model.EppResource> reference;
  java.lang.String kind;
}
class google.registry.model.index.EppResourceIndexBucket {
  @Id long bucketId;
}
class google.registry.model.index.ForeignKeyIndex$ForeignKeyContactIndex {
  @Id java.lang.String foreignKey;
  google.registry.persistence.VKey<E> topReference;
  org.joda.time.DateTime deletionTime;
}
class google.registry.model.index.ForeignKeyIndex$ForeignKeyDomainIndex {
  @Id java.lang.String foreignKey;
  google.registry.persistence.VKey<E> topReference;
  org.joda.time.DateTime deletionTime;
}
class google.registry.model.index.ForeignKeyIndex$ForeignKeyHostIndex {
  @Id java.lang.String foreignKey;
  google.registry.persistence.VKey<E> topReference;
  org.joda.time.DateTime deletionTime;
}
class google.registry.model.rde.RdeRevision {
  @Id java.lang.String id;
  int revision;
}
class google.registry.model.registrar.Registrar {
  @Id java.lang.String clientIdentifier;
  @Parent com.googlecode.objectify.Key<google.registry.model.common.EntityGroupRoot> parent;
  boolean blockPremiumNames;
  boolean contactsRequireSyncing;
  boolean registryLockAllowed;
  google.registry.model.registrar.Registrar$State state;
  google.registry.model.registrar.Registrar$Type type;
  google.registry.model.registrar.RegistrarAddress internationalizedAddress;
  google.registry.model.registrar.RegistrarAddress localizedAddress;
  java.lang.Long ianaIdentifier;
  java.lang.String clientCertificate;
  java.lang.String clientCertificateHash;
  java.lang.String driveFolderId;
  java.lang.String emailAddress;
  java.lang.String failoverClientCertificate;
  java.lang.String failoverClientCertificateHash;
  java.lang.String faxNumber;
  java.lang.String icannReferralEmail;
  java.lang.String passwordHash;
  java.lang.String phoneNumber;
  java.lang.String phonePasscode;
  java.lang.String poNumber;
  java.lang.String registrarName;
  java.lang.String salt;
  java.lang.String url;
  java.lang.String whoisServer;
  java.util.List<google.registry.util.CidrAddressBlock> ipAddressWhitelist;
  java.util.Map<org.joda.money.CurrencyUnit, java.lang.String> billingAccountMap;
  java.util.Set<java.lang.String> allowedTlds;
  java.util.Set<java.lang.String> rdapBaseUrls;
  org.joda.time.DateTime lastCertificateUpdateTime;
  org.joda.time.DateTime lastExpiringCertNotificationSentDate;
  org.joda.time.DateTime lastExpiringFailoverCertNotificationSentDate;
}
enum google.registry.model.registrar.Registrar$State {
  ACTIVE;
  DISABLED;
  PENDING;
  SUSPENDED;
}
enum google.registry.model.registrar.Registrar$Type {
  EXTERNAL_MONITORING;
  INTERNAL;
  MONITORING;
  OTE;
  PDT;
  REAL;
  TEST;
}
class google.registry.model.registrar.RegistrarAddress {
  java.lang.String city;
  java.lang.String countryCode;
  java.lang.String state;
  java.lang.String zip;
  java.util.List<java.lang.String> street;
}
class google.registry.model.reporting.DomainTransactionRecord {
  google.registry.model.reporting.DomainTransactionRecord$TransactionReportField reportField;
  java.lang.Integer reportAmount;
  java.lang.String tld;
  org.joda.time.DateTime reportingTime;
}
enum google.registry.model.reporting.DomainTransactionRecord$TransactionReportField {
  DELETED_DOMAINS_GRACE;
  DELETED_DOMAINS_NOGRACE;
  NET_ADDS_10_YR;
  NET_ADDS_1_YR;
  NET_ADDS_2_YR;
  NET_ADDS_3_YR;
  NET_ADDS_4_YR;
  NET_ADDS_5_YR;
  NET_ADDS_6_YR;
  NET_ADDS_7_YR;
  NET_ADDS_8_YR;
  NET_ADDS_9_YR;
  NET_RENEWS_10_YR;
  NET_RENEWS_1_YR;
  NET_RENEWS_2_YR;
  NET_RENEWS_3_YR;
  NET_RENEWS_4_YR;
  NET_RENEWS_5_YR;
  NET_RENEWS_6_YR;
  NET_RENEWS_7_YR;
  NET_RENEWS_8_YR;
  NET_RENEWS_9_YR;
  RESTORED_DOMAINS;
  TRANSFER_NACKED;
  TRANSFER_SUCCESSFUL;
}
class google.registry.model.reporting.HistoryEntry {
  @Id java.lang.Long id;
  @Parent com.googlecode.objectify.Key<? extends google.registry.model.EppResource> parent;
  boolean bySuperuser;
  byte[] xmlBytes;
  google.registry.model.domain.Period period;
  google.registry.model.eppcommon.Trid trid;
  google.registry.model.reporting.HistoryEntry$Type type;
  java.lang.Boolean requestedByRegistrar;
  java.lang.String clientId;
  java.lang.String otherClientId;
  java.lang.String reason;
  java.util.Set<google.registry.model.reporting.DomainTransactionRecord> domainTransactionRecords;
  org.joda.time.DateTime modificationTime;
}
enum google.registry.model.reporting.HistoryEntry$Type {
  CONTACT_CREATE;
  CONTACT_DELETE;
  CONTACT_DELETE_FAILURE;
  CONTACT_PENDING_DELETE;
  CONTACT_TRANSFER_APPROVE;
  CONTACT_TRANSFER_CANCEL;
  CONTACT_TRANSFER_REJECT;
  CONTACT_TRANSFER_REQUEST;
  CONTACT_UPDATE;
  DOMAIN_ALLOCATE;
  DOMAIN_AUTORENEW;
  DOMAIN_CREATE;
  DOMAIN_DELETE;
  DOMAIN_RENEW;
  DOMAIN_RESTORE;
  DOMAIN_TRANSFER_APPROVE;
  DOMAIN_TRANSFER_CANCEL;
  DOMAIN_TRANSFER_REJECT;
  DOMAIN_TRANSFER_REQUEST;
  DOMAIN_UPDATE;
  HOST_CREATE;
  HOST_DELETE;
  HOST_DELETE_FAILURE;
  HOST_PENDING_DELETE;
  HOST_UPDATE;
  RDE_IMPORT;
  SYNTHETIC;
}
class google.registry.model.server.Lock {
  @Id java.lang.String lockId;
  java.lang.String requestLogId;
  java.lang.String resourceName;
  java.lang.String tld;
  org.joda.time.DateTime acquiredTime;
  org.joda.time.DateTime expirationTime;
}
class google.registry.model.server.ServerSecret {
  @Id long id;
  @Parent com.googlecode.objectify.Key<google.registry.model.common.EntityGroupRoot> parent;
  long leastSignificant;
  long mostSignificant;
}
class google.registry.model.transfer.ContactTransferData {
  google.registry.model.eppcommon.Trid transferRequestTrid;
  google.registry.model.transfer.TransferStatus transferStatus;
  java.lang.String gainingClientId;
  java.lang.String losingClientId;
  org.joda.time.DateTime pendingTransferExpirationTime;
  org.joda.time.DateTime transferRequestTime;
}
class google.registry.model.transfer.DomainTransferData {
  google.registry.model.domain.Period transferPeriod;
  google.registry.model.eppcommon.Trid transferRequestTrid;
  google.registry.model.transfer.TransferStatus transferStatus;
  google.registry.persistence.VKey<google.registry.model.poll.PollMessage$Autorenew> serverApproveAutorenewPollMessage;
  java.lang.String gainingClientId;
  java.lang.String losingClientId;
  org.joda.time.DateTime pendingTransferExpirationTime;
  org.joda.time.DateTime transferRequestTime;
  org.joda.time.DateTime transferredRegistrationExpirationTime;
}
enum google.registry.model.transfer.TransferStatus {
  CLIENT_APPROVED;
  CLIENT_CANCELLED;
  CLIENT_REJECTED;
  PENDING;
  SERVER_APPROVED;
  SERVER_CANCELLED;
}
class google.registry.persistence.DomainHistoryVKey {
  java.lang.Long historyRevisionId;
  java.lang.String repoId;
}
