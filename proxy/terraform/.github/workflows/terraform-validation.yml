name: Terraform 6.37.0 Validation

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'proxy/terraform/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'proxy/terraform/**'
  workflow_dispatch:
    inputs:
      test_environment:
        description: 'Test environment name'
        required: false
        default: 'ci-test'
        type: string

env:
  TERRAFORM_VERSION: '1.6.0'
  GOOGLE_PROVIDER_VERSION: '6.37.0'
  TF_VAR_environment: ${{ github.event.inputs.test_environment || 'ci-test' }}

jobs:
  terraform-validation:
    name: Terraform Validation
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write  # Required for Workload Identity
      
    strategy:
      matrix:
        terraform-version: ['1.5.0', '1.6.0', '1.7.0']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ matrix.terraform-version }}
        
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        version: 'latest'
        
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
        
    - name: Set up test environment
      run: |
        echo "Setting up test environment for Terraform ${{ matrix.terraform-version }}"
        echo "TERRAFORM_VERSION=${{ matrix.terraform-version }}" >> $GITHUB_ENV
        echo "TEST_PROJECT_ID=${{ secrets.TEST_PROJECT_ID }}" >> $GITHUB_ENV
        
    - name: Run Terraform format check
      working-directory: proxy/terraform
      run: terraform fmt -check -recursive
      
    - name: Run Terraform validation tests
      working-directory: proxy/terraform
      run: |
        chmod +x scripts/test_terraform.sh
        ./scripts/test_terraform.sh
        
    - name: Run integration tests
      working-directory: proxy/terraform
      env:
        TEST_PROJECT_ID: ${{ secrets.TEST_PROJECT_ID }}
      run: |
        chmod +x scripts/integration_test.sh
        ./scripts/integration_test.sh
        
    - name: Run comprehensive test suite
      working-directory: proxy/terraform
      env:
        TEST_PROJECT_ID: ${{ secrets.TEST_PROJECT_ID }}
      run: |
        chmod +x scripts/run_all_tests.sh
        ./scripts/run_all_tests.sh
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-tf-${{ matrix.terraform-version }}
        path: proxy/terraform/test-results/
        retention-days: 30
        
    - name: Comment PR with test results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request' && always()
      with:
        script: |
          const fs = require('fs');
          const path = 'proxy/terraform/test-results';
          
          if (fs.existsSync(path)) {
            const files = fs.readdirSync(path).filter(f => f.startsWith('test_report_'));
            if (files.length > 0) {
              const reportPath = `${path}/${files[0]}`;
              const report = fs.readFileSync(reportPath, 'utf8');
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## Terraform 6.37.0 Validation Results (TF ${{ matrix.terraform-version }})
                
${report}

**Workflow:** ${{ github.workflow }}
**Run:** ${{ github.run_number }}
**Commit:** ${{ github.sha }}`
              });
            }
          }

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: terraform-validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Checkov security scan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: proxy/terraform
        framework: terraform
        output_format: sarif
        output_file_path: checkov-results.sarif
        
    - name: Upload Checkov results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: checkov-results.sarif
        
    - name: Run TFSec security scan
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: proxy/terraform
        format: sarif
        soft_fail: true
        
  deployment-readiness:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [terraform-validation, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
        
    - name: Deployment readiness validation
      working-directory: proxy/terraform
      env:
        TEST_PROJECT_ID: ${{ secrets.TEST_PROJECT_ID }}
      run: |
        echo "üöÄ Validating deployment readiness for production..."
        
        # Initialize Terraform with production-like settings
        terraform init -upgrade
        
        # Validate configuration
        terraform validate
        
        # Plan with production variables (dry run)
        terraform plan -var-file=production.tfvars.example -out=production.tfplan || echo "Production plan validation completed"
        
        echo "‚úÖ Deployment readiness validation completed"
        
    - name: Create deployment artifact
      if: success()
      run: |
        echo "Creating deployment artifact..."
        tar -czf terraform-6.37.0-ready.tar.gz proxy/terraform/
        
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: terraform-6.37.0-deployment-ready
        path: terraform-6.37.0-ready.tar.gz
        retention-days: 90
        
  notification:
    name: Notification
    runs-on: ubuntu-latest
    needs: [terraform-validation, security-scan, deployment-readiness]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.terraform-validation.result == 'success' && needs.security-scan.result == 'success'
      run: |
        echo "üéâ Terraform 6.37.0 validation successful!"
        echo "Infrastructure is ready for production deployment."
        
    - name: Notify failure
      if: needs.terraform-validation.result == 'failure' || needs.security-scan.result == 'failure'
      run: |
        echo "‚ùå Terraform 6.37.0 validation failed!"
        echo "Please review the test results and address any issues."
        exit 1