#!/bin/bash

# Comprehensive Test Runner for Terraform 6.37.0 Infrastructure
# Orchestrates all testing frameworks for complete validation

set -euo pipefail

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
TERRAFORM_DIR="$(dirname "$SCRIPT_DIR")"
TEST_RESULTS_DIR="$TERRAFORM_DIR/test-results"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
OVERALL_LOG="$TEST_RESULTS_DIR/comprehensive_test_$TIMESTAMP.log"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Create test results directory
mkdir -p "$TEST_RESULTS_DIR"

# Logging functions
log() {
    echo -e "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$OVERALL_LOG"
}

header() {
    echo -e "${PURPLE}================================================================${NC}" | tee -a "$OVERALL_LOG"
    echo -e "${PURPLE}$1${NC}" | tee -a "$OVERALL_LOG"
    echo -e "${PURPLE}================================================================${NC}" | tee -a "$OVERALL_LOG"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}" | tee -a "$OVERALL_LOG"
}

error() {
    echo -e "${RED}‚ùå $1${NC}" | tee -a "$OVERALL_LOG"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}" | tee -a "$OVERALL_LOG"
}

info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}" | tee -a "$OVERALL_LOG"
}

# Test suite tracking
TOTAL_SUITES=0
PASSED_SUITES=0
FAILED_SUITES=0
TEST_RESULTS=()

# Function to run test suite
run_test_suite() {
    local suite_name="$1"
    local suite_script="$2"
    local suite_description="$3"
    
    TOTAL_SUITES=$((TOTAL_SUITES + 1))
    
    header "$suite_name"
    info "$suite_description"
    
    local start_time=$(date +%s)
    
    if [ -x "$suite_script" ]; then
        if "$suite_script"; then
            local end_time=$(date +%s)
            local duration=$((end_time - start_time))
            success "$suite_name completed successfully in ${duration}s"
            PASSED_SUITES=$((PASSED_SUITES + 1))
            TEST_RESULTS+=("‚úÖ $suite_name - PASSED (${duration}s)")
            return 0
        else
            local end_time=$(date +%s)
            local duration=$((end_time - start_time))
            error "$suite_name failed after ${duration}s"
            FAILED_SUITES=$((FAILED_SUITES + 1))
            TEST_RESULTS+=("‚ùå $suite_name - FAILED (${duration}s)")
            return 1
        fi
    else
        error "$suite_name script not found or not executable: $suite_script"
        FAILED_SUITES=$((FAILED_SUITES + 1))
        TEST_RESULTS+=("‚ùå $suite_name - SCRIPT NOT FOUND")
        return 1
    fi
}

# Generate comprehensive test report
generate_test_report() {
    local report_file="$TEST_RESULTS_DIR/test_report_$TIMESTAMP.md"
    
    cat > "$report_file" << EOF
# Terraform 6.37.0 Comprehensive Test Report

**Test Run ID:** comprehensive-test-$TIMESTAMP  
**Timestamp:** $(date '+%Y-%m-%d %H:%M:%S')  
**Environment:** $(uname -a)  
**Terraform Version:** $(terraform version | head -n1)  

## Executive Summary

- **Total Test Suites:** $TOTAL_SUITES
- **Passed:** $PASSED_SUITES
- **Failed:** $FAILED_SUITES
- **Success Rate:** $(( PASSED_SUITES * 100 / TOTAL_SUITES ))%

## Test Results

EOF

    for result in "${TEST_RESULTS[@]}"; do
        echo "- $result" >> "$report_file"
    done
    
    cat >> "$report_file" << EOF

## Infrastructure Validation Status

$(if [ $FAILED_SUITES -eq 0 ]; then
    echo "üéâ **INFRASTRUCTURE READY FOR PRODUCTION**"
    echo ""
    echo "All validation tests have passed successfully. The Terraform infrastructure is fully compatible with Google Cloud Provider 6.37.0 and ready for production deployment."
else
    echo "‚ö†Ô∏è **INFRASTRUCTURE NOT READY**"
    echo ""
    echo "$FAILED_SUITES test suite(s) failed. Please address all issues before proceeding with production deployment."
fi)

## Detailed Logs

- Comprehensive Test Log: \`test-results/comprehensive_test_$TIMESTAMP.log\`
- Individual Test Results: \`test-results/\` directory

## Next Steps

$(if [ $FAILED_SUITES -eq 0 ]; then
    echo "1. Proceed with production deployment planning"
    echo "2. Execute deployment strategy validation"
    echo "3. Prepare rollback procedures"
    echo "4. Schedule production deployment window"
else
    echo "1. Review failed test details in log files"
    echo "2. Address identified issues"
    echo "3. Re-run test suite after fixes"
    echo "4. Do not proceed to production until all tests pass"
fi)

---
*Report generated by Terraform 6.37.0 Test Framework*
EOF
    
    info "Comprehensive test report generated: $report_file"
}

# System information
display_system_info() {
    header "SYSTEM INFORMATION"
    
    info "Operating System: $(uname -s) $(uname -r)"
    info "Architecture: $(uname -m)"
    
    # Terraform version
    if command -v terraform &> /dev/null; then
        local tf_version=$(terraform version | head -n1)
        info "Terraform: $tf_version"
    else
        warning "Terraform not found in PATH"
    fi
    
    # Google Cloud SDK
    if command -v gcloud &> /dev/null; then
        local gcloud_version=$(gcloud version --format="value(Google Cloud SDK)" 2>/dev/null | head -n1)
        info "Google Cloud SDK: $gcloud_version"
    else
        warning "Google Cloud SDK not found in PATH"
    fi
    
    # kubectl
    if command -v kubectl &> /dev/null; then
        local kubectl_version=$(kubectl version --client --short 2>/dev/null | cut -d' ' -f3)
        info "kubectl: $kubectl_version"
    else
        warning "kubectl not found in PATH"
    fi
    
    # Current directory
    info "Working Directory: $(pwd)"
    info "Test Results Directory: $TEST_RESULTS_DIR"
}

# Main execution
main() {
    local start_time=$(date +%s)
    
    header "TERRAFORM 6.37.0 COMPREHENSIVE VALIDATION SUITE"
    log "Starting comprehensive test execution"
    log "Test Results Directory: $TEST_RESULTS_DIR"
    log "Overall Log File: $OVERALL_LOG"
    
    # Display system information
    display_system_info
    
    # Run all test suites
    run_test_suite \
        "Terraform Compatibility Tests" \
        "$SCRIPT_DIR/test_terraform.sh" \
        "Validates Terraform syntax, provider versions, and configuration compliance"
    
    run_test_suite \
        "Integration Tests" \
        "$SCRIPT_DIR/integration_test.sh" \
        "Tests real-world deployment scenarios and infrastructure functionality"
    
    # Calculate total execution time
    local end_time=$(date +%s)
    local total_duration=$((end_time - start_time))
    
    # Generate comprehensive report
    generate_test_report
    
    # Final summary
    header "COMPREHENSIVE TEST SUITE SUMMARY"
    log "Total Execution Time: ${total_duration}s"
    log "Test Suites Run: $TOTAL_SUITES"
    log "Successful: $PASSED_SUITES"
    log "Failed: $FAILED_SUITES"
    
    echo "" | tee -a "$OVERALL_LOG"
    for result in "${TEST_RESULTS[@]}"; do
        echo "$result" | tee -a "$OVERALL_LOG"
    done
    echo "" | tee -a "$OVERALL_LOG"
    
    if [ $FAILED_SUITES -eq 0 ]; then
        success "üéâ ALL TEST SUITES PASSED!"
        success "Infrastructure is READY for Terraform 6.37.0 production deployment"
        log "================================"
        log "VALIDATION RESULT: SUCCESS ‚úÖ"
        log "================================"
        exit 0
    else
        error "‚ùå $FAILED_SUITES test suite(s) failed"
        error "Infrastructure is NOT READY for production deployment"
        log "================================"
        log "VALIDATION RESULT: FAILURE ‚ùå"
        log "================================"
        exit 1
    fi
}

# Cleanup function
cleanup() {
    log "Test execution completed. Logs preserved in: $TEST_RESULTS_DIR"
}

# Set trap for cleanup
trap cleanup EXIT

# Execute main function
main "$@"