30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700   1) # First steps tutorial
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700   2) 
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700   3) This document covers the first steps of creating some test entities in a newly
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700   4) deployed and configured testing environment. It isn't required, but it does help
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700   5) gain familiarity with the system. If you have not already done so, you must
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700   6) first complete [installation](./install.md) and [initial
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700   7) configuration](./configuration.md).
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700   8) 
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700   9) Note: Do not create these entities on a production environment! All commands
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  10) below use the [`nomulus` admin tool](./admin-tool.md) to interact with the
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  11) running registry system. We'll assume that all commands below are running in the
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  12) `alpha` environment; if you named your environment differently, then use that
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  13) everywhere that `alpha` appears.
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  14) 
edfddc18f3 (juniorpayne    2025-05-21 14:11:54 -0400  15) ## Temporary extra step
8c1021f8cb (nickfelt       2016-10-18 07:42:02 -0700  16) 
edfddc18f3 (juniorpayne    2025-05-21 14:11:54 -0400  17) Using the `nomulus` admin tool currently requires an additional step to enable
edfddc18f3 (juniorpayne    2025-05-21 14:11:54 -0400  18) full functionality. This step should **not** be done for a production
edfddc18f3 (juniorpayne    2025-05-21 14:11:54 -0400  19) deploymentâ€”a suitable solution for production is in progress.
8c1021f8cb (nickfelt       2016-10-18 07:42:02 -0700  20) 
edfddc18f3 (juniorpayne    2025-05-21 14:11:54 -0400  21) Modify the `core/src/main/java/google/registry/env/common/tools/WEB-INF/web.xml`
edfddc18f3 (juniorpayne    2025-05-21 14:11:54 -0400  22) file to remove the admin-only restriction. Look for the
edfddc18f3 (juniorpayne    2025-05-21 14:11:54 -0400  23) `<auth-constraint>admin</auth-constraint>` element, comment it out and redeploy
edfddc18f3 (juniorpayne    2025-05-21 14:11:54 -0400  24) the tools module to your live app.
8c1021f8cb (nickfelt       2016-10-18 07:42:02 -0700  25) 
8c1021f8cb (nickfelt       2016-10-18 07:42:02 -0700  26) ## Create a TLD
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  27) 
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  28) Pick the name of a TLD to create. For the purposes of this example we'll use
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  29) "example", which conveniently happens to be an ICANN reserved string, meaning
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  30) it'll never be created for real on the Internet at large.
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  31) 
edfddc18f3 (juniorpayne    2025-05-21 14:11:54 -0400  32) TLDs are configured via YAML files. Create a file `example.yaml` with the
edfddc18f3 (juniorpayne    2025-05-21 14:11:54 -0400  33) following minimal contents:
edfddc18f3 (juniorpayne    2025-05-21 14:11:54 -0400  34) 
edfddc18f3 (juniorpayne    2025-05-21 14:11:54 -0400  35) ```yaml
edfddc18f3 (juniorpayne    2025-05-21 14:11:54 -0400  36) tldStr: example
edfddc18f3 (juniorpayne    2025-05-21 14:11:54 -0400  37) tldType: TEST
edfddc18f3 (juniorpayne    2025-05-21 14:11:54 -0400  38) tldStateTransitions:
edfddc18f3 (juniorpayne    2025-05-21 14:11:54 -0400  39)   "1970-01-01T00:00:00.000Z": "GENERAL_AVAILABILITY"
edfddc18f3 (juniorpayne    2025-05-21 14:11:54 -0400  40) roidSuffix: EXAMPLE
edfddc18f3 (juniorpayne    2025-05-21 14:11:54 -0400  41) dnsWriters:
edfddc18f3 (juniorpayne    2025-05-21 14:11:54 -0400  42)   - VoidDnsWriter
edfddc18f3 (juniorpayne    2025-05-21 14:11:54 -0400  43) ```
edfddc18f3 (juniorpayne    2025-05-21 14:11:54 -0400  44) 
edfddc18f3 (juniorpayne    2025-05-21 14:11:54 -0400  45) Then run:
edfddc18f3 (juniorpayne    2025-05-21 14:11:54 -0400  46) 
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  47) ```shell
edfddc18f3 (juniorpayne    2025-05-21 14:11:54 -0400  48) $ nomulus -e alpha configure_tld --input example.yaml
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  49) [ ... snip confirmation prompt ... ]
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  50) Perform this command? (y/N): y
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  51) Updated 1 entities.
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  52) ```
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  53) 
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  54) *   `-e` is the environment name (`alpha` in this example).
edfddc18f3 (juniorpayne    2025-05-21 14:11:54 -0400  55) *   `configure_tld` creates or updates a TLD based on the YAML file.
edfddc18f3 (juniorpayne    2025-05-21 14:11:54 -0400  56) *   `tldType` describes the TLD type. `TEST` identifies that the TLD is for
edfddc18f3 (juniorpayne    2025-05-21 14:11:54 -0400  57)     testing purposes, where `REAL` identifies a live TLD.
edfddc18f3 (juniorpayne    2025-05-21 14:11:54 -0400  58) *   `tldStateTransitions` defines the initial state of the TLD. In the example,
edfddc18f3 (juniorpayne    2025-05-21 14:11:54 -0400  59)     `GENERAL_AVAILABILITY` allows immediate domain creation.
edfddc18f3 (juniorpayne    2025-05-21 14:11:54 -0400  60) *   `roidSuffix` is the suffix that will be used for repository ids of domains
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  61)     on the TLD. This suffix must be all uppercase and a maximum of eight ASCII
879fc7a44c (bbilbo         2017-07-20 07:52:08 -0700  62)     characters and can be set to the upper-case equivalent of our TLD name (if
879fc7a44c (bbilbo         2017-07-20 07:52:08 -0700  63)     it is 8 characters or fewer), such as "EXAMPLE." You can also abbreviate the
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  64)     upper-case TLD name down to 8 characters. Refer to the [gTLD Registry
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  65)     Advisory: Correction of non-compliant ROIDs][roids] for further information.
edfddc18f3 (juniorpayne    2025-05-21 14:11:54 -0400  66) *   `dnsWriters` is the list of DNS writer modules that specify how changes
b44c7d2786 (Michael Muller 2020-08-17 14:46:32 -0400  67)     to domains for the TLD are communicated to actual DNS servers.  We use
b44c7d2786 (Michael Muller 2020-08-17 14:46:32 -0400  68)     `VoidDnsWriter` in this case so as to not have to set up DNS.  Typically
b44c7d2786 (Michael Muller 2020-08-17 14:46:32 -0400  69)     one might use CloudDnsWriter (for Google Cloud DNS) or implement your own
b44c7d2786 (Michael Muller 2020-08-17 14:46:32 -0400  70)     solution.
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  71) 
8c1021f8cb (nickfelt       2016-10-18 07:42:02 -0700  72) ## Create a registrar
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  73) 
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  74) Now we need to create a registrar and give it access to operate on the example
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  75) TLD. For the purposes of our example we'll name the registrar "Acme".
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  76) 
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  77) ```shell
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  78) $ nomulus -e alpha create_registrar acme --name 'ACME Corp' \
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  79)   --registrar_type TEST --password hunter2 \
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  80)   --icann_referral_email blaine@acme.example --street '123 Fake St' \
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  81)   --city 'Fakington' --state MA --zip 12345 --cc US --allowed_tlds example
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  82) [ ... snip confirmation prompt ... ]
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  83) Perform this command? (y/N): y
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  84) Updated 1 entities.
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  85) Skipping registrar groups creation because only production and sandbox
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  86) support it.
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  87) ```
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  88) 
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  89) Where:
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  90) 
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  91) *   `create_registrar` is the subcommand to create a registrar. The argument you
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  92)     provide ("acme") is the registrar id, called the client identifier, that is
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  93)     the primary key used to refer to the registrar both internally and
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  94)     externally.
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  95) *   `--name` indicates the display name of the registrar, in this case `ACME
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  96)     Corp`.
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  97) *   `--registrar_type` is the type of registrar. `TEST` identifies that the
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  98)     registrar is for testing purposes, where `REAL` identifies the registrar is
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700  99)     a real live registrar.
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 100) *   `--password` is the password used by the registrar to log in to the domain
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 101)     registry system.
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 102) *   `--icann_referral_email` is the email address associated with the initial
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 103)     creation of the registrar. This address cannot be changed.
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 104) *   `--allowed_tlds` is a comma-delimited list of top level domains where this
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 105)     registrar has access.
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 106) 
8c1021f8cb (nickfelt       2016-10-18 07:42:02 -0700 107) ## Create a contact
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 108) 
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 109) Now we want to create a contact, as a contact is required before a domain can be
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 110) created. Contacts can be used on any number of domains across any number of
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 111) TLDs, and contain the information on who owns or provides technical support for
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 112) a TLD. These details will appear in WHOIS queries.
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 113) 
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 114) ```shell
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 115) $ nomulus -e alpha create_contact -c acme --id abcd1234 \
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 116)   --name 'John Smith' --street '234 Fake St' --city 'North Fakington' \
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 117)   --state MA --zip 23456 --cc US --email jsmith@e.mail
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 118) [ ... snip EPP response ... ]
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 119) ```
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 120) 
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 121) Where:
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 122) 
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 123) *   `create_contact` is the subcommand to create a contact.
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 124) *   `-c` is used to define the registrar. The `-c` option is used with most
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 125)     `registry_tool` commands to specify the id of the registrar executing the
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 126)     command. Contact, domain, and host creation all work by constructing an EPP
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 127)     message that is sent to the registry, and EPP commands need to run under the
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 128)     context of a registrar. The "acme" registrar that was created above is used
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 129)     for this purpose.
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 130) *   `--id` is the contact id, and is referenced elsewhere in the system (e.g.
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 131)     when a domain is created and the admin contact is specified).
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 132) *   `--name` is the display name of the contact, which is usually the name of a
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 133)     company or of a person.
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 134) 
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 135) The address and `email` fields are required to create a contact.
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 136) 
8c1021f8cb (nickfelt       2016-10-18 07:42:02 -0700 137) ## Create a host
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 138) 
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 139) Hosts are used to specify the IP addresses (either v4 or v6) that are associated
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 140) with a given nameserver. Note that hosts may either be in-bailiwick (on a TLD
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 141) that this registry runs) or out-of-bailiwick. In-bailiwick hosts may
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 142) additionally be subordinate (a subdomain of a domain name that is on this
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 143) registry). Let's create an out-of-bailiwick nameserver, which is the simplest
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 144) type.
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 145) 
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 146) ```shell
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 147) $ nomulus -e alpha create_host -c acme --host ns1.google.com
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 148) [ ... snip EPP response ... ]
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 149) ```
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 150) 
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 151) Where:
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 152) 
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 153) *   `create_host` is the subcommand to create a host.
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 154) *   `--host` is the name of the host.
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 155) *   `--addresses` (not used here) is the comma-delimited list of IP addresses
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 156)     for the host in IPv4 or IPv6 format, if applicable.
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 157) 
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 158) Note that hosts are required to have IP addresses if they are subordinate, and
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 159) must not have IP addresses if they are not subordinate.
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 160) 
8c1021f8cb (nickfelt       2016-10-18 07:42:02 -0700 161) ## Create a domain
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 162) 
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 163) To tie it all together, let's create a domain name that uses the above contact
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 164) and host.
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 165) 
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 166) ```shell
1c015028d9 (bbilbo         2017-07-20 09:15:01 -0700 167) $ nomulus -e alpha create_domain fake.example --client acme --admins abcd1234 \
1c015028d9 (bbilbo         2017-07-20 09:15:01 -0700 168)   --techs abcd1234 --registrant abcd1234 --nameservers ns1.google.com
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 169) [ ... snip EPP response ... ]
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 170) ```
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 171) 
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 172) Where:
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 173) 
6e6a340113 (jianglai       2017-05-12 07:17:26 -0700 174) *   `create_domain` is the subcommand to create a domain name. It accepts a
8087f5bbca (0xflotus       2020-05-11 16:01:47 +0200 175)     whitespace-separated list of domain names to be created
6e6a340113 (jianglai       2017-05-12 07:17:26 -0700 176) *   `--client` is used to define the registrar.
1c015028d9 (bbilbo         2017-07-20 09:15:01 -0700 177) *   `--admins` is the administrative contact's id(s).
1c015028d9 (bbilbo         2017-07-20 09:15:01 -0700 178) *   `--techs` is the technical contact's id(s).
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 179) *   `--registrant` is the registrant contact's id.
6e6a340113 (jianglai       2017-05-12 07:17:26 -0700 180) *   `--nameservers` is a comma-separated list of hosts.
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 181) 
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 182) Note how the same contact id is used for the administrative, technical, and
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 183) registrant contact. It is common for domain names to use the same details for
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 184) all contacts on a domain name.
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 185) 
8c1021f8cb (nickfelt       2016-10-18 07:42:02 -0700 186) ## Verify test entities using WHOIS
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 187) 
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 188) To verify that everything worked, let's query the WHOIS information for
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 189) fake.example:
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 190) 
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 191) ```shell
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 192) $ nomulus -e alpha whois_query fake.example
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 193) [ ... snip WHOIS response ... ]
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 194) ```
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 195) 
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 196) You should see all of the information in WHOIS that you entered above for the
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 197) contact, nameserver, and domain.
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 198) 
30adfd28fc (mcilwain       2016-10-06 12:34:43 -0700 199) [roids]: https://www.icann.org/resources/pages/correction-non-compliant-roids-2015-08-26-en
